{"version":3,"sources":["layout/SignedInLinks.js","layout/Navbar.js","Todos/Todo.js","layout/SignInForm.js","Todos/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["SignedInLinks","changeColor","console","log","document","getElementById","style","backgroundColor","getRandomRGBValue","Math","min","floor","random","getRandomColor","toString","slice","changeThemeColor","randomColor","handleSignOut","className","id","onClick","this","Component","Navbar","props","auth","href","data-target","Todo","todos","removeTodo","todoList","length","map","todo","key","type","content","value","SignInForm","state","email","password","handleChange","e","setState","target","handleLogin","preventDefault","onSignIn","onSubmit","bind","htmlFor","onChange","AddTodo","handleSubmit","addTodo","App","user","handleClick","node","contains","handleClickOutside","localStorage","setItem","JSON","stringify","filter","sidenav","querySelector","M","Sidenav","init","elems","querySelectorAll","Dropdown","inDuration","outDuration","updateTodoList","addEventListener","removeEventListener","propsList","ref","logIn","Boolean","window","location","hostname","match","renderReactDom","orientation","root","safeAreaInsetNorth","css","safeAreaInsetEast","safeAreaInsetSouth","safeAreaInsetWest","fixTopIssue","max","marginTopDefault","newMarginTop","getGlobalCssVariableInPx","undefined","ReactDOM","render","confirmCallback","getTodos","getItem","parse","onResume","navigator","notification","alert","onPause","cordova","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3c5b622.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport '../index.css'\n\nclass SignedInLinks extends Component {\n\n\n    changeColor = () => {\n        console.log('click')\n        document.getElementById('color-button').style.backgroundColor = \"blue\";\n    }\n\n    getRandomRGBValue = () => {\n        return Math.min(Math.floor(Math.random() * 255 + 1), 255);\n    }\n    \n    getRandomColor = () => {\n        var r = this.getRandomRGBValue(),\n            g = this.getRandomRGBValue(),\n            b = this.getRandomRGBValue();\n        return \"#\" + (((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1));\n    }\n    \n    changeThemeColor = () => {\n        var randomColor = this.getRandomColor();\n        document.getElementById('color-button').style.backgroundColor = randomColor;\n        document.getElementById('nav-bar').style.backgroundColor = randomColor;\n    }\n\n    handleSignOut = () => {\n        console.log('user signed out');\n    }\n\n    render() {\n        return (\n            <div className=\"container side-nav-container\">\n                <li><a className=\"btn-small\" id=\"color-button\" onClick={this.changeThemeColor}><i className=\"material-icons\">color_lens</i></a></li>\n            </div>\n        )\n    }\n}\n\n\nexport default SignedInLinks;","import React, { Component } from 'react'\nimport SignedOutLinks from './SignedOutLinks'\nimport SignedInLinks from './SignedInLinks'\nimport '../index.css'\n\n\nclass Navbar extends Component {\n\n\n    render() {\n        \n        console.log('Navbar checking auth..');\n        console.log(this.props.auth);\n \n        return (\n            <div>\n                <nav className=\"nav-wrapper navbar\" id=\"navbar\">\n\n                    <div className=\"container\">\n                        <a href=\"/\" className=\"brand-logo\">Todo App</a>\n                        <a href=\"/\" data-target=\"mobile-links\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n\n                        <ul className=\"right hide-on-med-and-down\">\n\n                        <SignedInLinks />\n                           \n                        </ul>\n                    </div>\n                </nav>\n\n                <div className=\"container\">\n                    <ul className=\"sidenav indigo center white side-nav\" id=\"mobile-links\">\n                    <SignedInLinks />\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Navbar","import React from 'react';\n\n\nconst Todo = ({ todos, removeTodo }) => {\n    let todoList = [];\n\n    if (todos) {\n        todoList = todos.length ? (\n            todos.map(todo => {\n                return (\n                    <div className=\"row\" key={todo.id}>\n                        <label className=\"left todo-item collection-item\">\n                            <input type=\"checkbox\" />\n                            <span>{todo.content}</span>\n                        </label>\n                        <div className=\"waves-effect waves-light btn-small right green-lighten-1\" value={todo.id} onClick={ () => { removeTodo(todo.id) }}><i className=\"material-icons right\">remove_circle_outline</i>remove</div>\n                    </div>\n                )\n            })\n        ) : (\n                <p>nothing left todo!</p>\n            )\n    }\n  \n    return (\n        <div className=\"container\" id=\"todo-list\">\n            <div className=\"col s12 m4 l2\"></div>\n\n            <div className=\"col s12 m4 l8\">\n                <div className=\"container center-align\">\n                    <h5 className=\"brand-logo\"> your todo list {todoList.length}</h5>\n                </div>\n\n                <div className=\"container\">\n                    <div className=\"collection\">\n                        {todoList}\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"col s12 m4 l2\"></div>\n        </div>\n    )\n}\n\n\nexport default Todo;","import React, { Component } from 'react';\n\nclass SignInForm extends Component {\n\n    state = {\n        email: '',\n        password: '',\n        auth: false\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleLogin = (e) => {\n        e.preventDefault();\n        let email = this.state.email;\n        let password = this.state.password;\n        console.log('signing in user..');\n\n        if (this.state.email === \"test@test.com\" && this.state.password === \"test\") {\n            this.state.auth = true;\n            \n            console.log(this.state.auth);\n            this.props.onSignIn(email, password);\n        }\n        else {\n            this.state.auth = false;\n            console.log(this.state.auth);\n            console.log('user tried bad login');\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"section\"></div>\n\n                <h5 className=\"indigo-text center\">Please, login into your account</h5>\n\n                <div className=\"section\"></div>\n\n                <div className=\"container\">\n\n                    <form onSubmit={this.handleLogin.bind(this)} className=\"transparent\">\n\n                        <div className=\"input-field\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n                        </div>\n\n                        <div className=\"input-field\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n                        </div>\n\n\n                        <div className=\"input-field\">\n                            <button className=\"btn indigo accent-3 z-depth-0\">Login</button>\n                        </div>\n\n                    </form>\n\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default SignInForm;","import React, { Component } from 'react'\n\nclass AddTodo extends Component {\n\n    state = {\n        content: ''\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            content: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state);\n        this.setState({\n            content: ''\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n\n                    <label><p className=\"center\">Add new todo:</p></label>\n                    <div className=\"input-field\">\n                        <input type=\"text\" onChange={this.handleChange} value={this.state.content} />\n                    </div>\n\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default AddTodo","import React, { Component } from 'react';\nimport Navbar from './layout/Navbar';\nimport M from 'materialize-css';\nimport './index.css';\nimport Todo from './Todos/Todo';\nimport SignInForm from './layout/SignInForm';\nimport AddTodo from './Todos/AddTodo'\n\nclass App extends Component {\n\n  state = {\n    user: null,\n    todos: [],\n    auth: false\n  }\n\n  componentDidMount() {\n    //mobile links\n    let sidenav = document.querySelector('#mobile-links');\n    M.Sidenav.init(sidenav, {});\n    //hamburgermenu dropdown settings\n    let elems = document.querySelectorAll('.dropdown-trigger');\n    M.Dropdown.init(elems, { inDuration: 300, outDuration: 200 });\n\n    this.updateTodoList();\n  }\n\n  componentWillMount() {\n    //click listener for clicking outside, not using atm\n    document.addEventListener('mousedown', this.handleClick, false);\n  }\n\n  componentWillUnmount() {\n    //click listener for clicking outside, not using atm\n    document.removeEventListener('mousedown', this.handleClick, false);\n  }\n\n  //handle click outside functions, not used currently. for future ideas\n  handleClick = (e) => {\n    //check if its outside or not\n    //outside means no element was hit by the click\n    if (this.node.contains(e.target)) {\n      return;\n    }\n    this.handleClickOutside();\n  }\n\n  handleClickOutside = () => {\n    console.log('outside click')\n  }\n\n  logIn(email, password) {\n    this.setState({\n      user: {\n        email,\n        password\n      },\n      auth: true\n    })\n  }\n\n  logOut() {\n    this.setState({\n      user: null\n    })\n  }\n\n  //add todo to localstorate\n  addTodo = (todo) => {\n    //give random id\n    todo.id = Math.random();\n    let todos = [];\n\n    if (this.state.todos) {\n      todos = [...this.state.todos, todo];\n    }\n    else {\n      todos = [\n        {\n          content: todo.content,\n          id: todo.id,\n        }\n      ]\n    }\n\n    this.setState({\n      todos\n    })\n    localStorage.setItem('todoList', JSON.stringify(todos));\n  }\n\n  removeTodo = (id) => {\n    //record in console log\n    console.log('removing');\n    console.log(id);\n\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    });\n\n    //update state list\n    this.setState({\n      todos\n    })\n\n    //update localstorage list\n    localStorage.setItem('todoList', JSON.stringify(todos));\n  }\n\n  updateTodoList() {\n\n    console.log('App found these props');\n    console.log(this.props.todoList);\n    let propsList = this.props.todoList;\n    this.setState({\n      todos: propsList\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"outer-node\" ref={node => this.node = node}>\n\n          <Navbar auth={this.state.auth}/>\n\n          {\n            (this.state.user) ?\n              <div className=\"container col s12 offset-s3\">\n                <Todo todos={this.state.todos} removeTodo={this.removeTodo} />\n                <AddTodo addTodo={this.addTodo} />\n              </div>\n              :\n              <SignInForm onSignIn={this.logIn.bind(this)} />\n          }\n\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = (todoList) => {\n  fixTopIssue();\n\n\n  window.addEventListener(\"orientationchange\", function () {\n    (\":root\").css(\"--app-margin-top\", Math.max(marginTopDefault, newMarginTop) + \"px\");\n    let marginTopDefault = window.getGlobalCssVariableInPx(\"--app-margin-top-default\");\n    let newMarginTop = undefined;\n    switch (window.orientation.type) {\n      case \"portrait-primary\": // Notch/North at the top.\n        newMarginTop = window.safeAreaInsetNorth;\n        break;\n      case \"portrait-secondary\": // Upside down... Notch/North at the bottom.\n        newMarginTop = window.safeAreaInsetSouth;\n        break;\n      case \"landscape-primary\": // Notch/North to the left.\n        newMarginTop = window.safeAreaInsetEast;\n        break;\n      case \"landscape-secondary\": // Notch/North to the right.\n        newMarginTop = window.safeAreaInsetWest;\n        break;\n      default:\n        throw \"No idea which way up I am!\";\n    }\n  }, false);\n\n  ReactDOM.render(<App todoList={todoList} />, document.getElementById('root'));\n};\n\n\n\nif (window.cordova) {\n\n  document.addEventListener('deviceready', onDeviceReady.bind(this), false);\n\n} else {\n\n  renderReactDom(getTodos());\n  console.log('else happened');\n}\n\n\n\nfunction onDeviceReady() {\n\n  //when user returns to application\n  document.addEventListener('resume', onResume.bind(this), false);\n  document.addEventListener('pause', onPause.bind(this), false);\n  console.log('ready happened');\n\n\n\n  renderReactDom(getTodos());\n}\n\nfunction confirmCallback() {\n  console.log('confirmed return');\n}\n\nfunction fixTopIssue() {\n  console.log(\"Screen orientation at startup is: \" + window.orientation.toString);\n  let root = (\":root\");\n  // Notch/North at the top.\n  if (window.orientation.match(\"portrait-primary\")) {\n    window.safeAreaInsetNorth = root.css(\"--safe-area-inset-top\");\n    window.safeAreaInsetEast = root.css(\"--safe-area-inset-right\");\n    window.safeAreaInsetSouth = root.css(\"--safe-area-inset-bottom\");\n    window.safeAreaInsetWest = root.css(\"--safe-area-inset-left\");\n  }\n  // Upside down... Notch/North at the bottom.\n  else if (window.orientation.type.match(\"portrait-secondary\")) {\n    window.safeAreaInsetNorth = root.css(\"--safe-area-inset-bottom\");\n    window.safeAreaInsetEast = root.css(\"--safe-area-inset-left\");\n    window.safeAreaInsetSouth = root.css(\"--safe-area-inset-top\");\n    window.safeAreaInsetWest = root.css(\"--safe-area-inset-right\");\n  }\n  // Notch/North to the left.\n  else if (window.orientation.type.match(\"landscape-primary\")) {\n    window.safeAreaInsetNorth = root.css(\"--safe-area-inset-left\");\n    window.safeAreaInsetEast = root.css(\"--safe-area-inset-top\");\n    window.safeAreaInsetSouth = root.css(\"--safe-area-inset-right\");\n    window.safeAreaInsetWest = root.css(\"--safe-area-inset-bottom\");\n  }\n  // Notch/North to the right.\n  else if (window.orientation.type.match(\"landscape-secondary\")) {\n    window.safeAreaInsetNorth = root.css(\"--safe-area-inset-right\");\n    window.safeAreaInsetEast = root.css(\"--safe-area-inset-bottom\");\n    window.safeAreaInsetSouth = root.css(\"--safe-area-inset-left\");\n    window.safeAreaInsetWest = root.css(\"--safe-area-inset-top\");\n  } else {\n    throw \"I have no idea which way up I am!\";\n  }\n}\n\n\n\nfunction getTodos() {\n  if (window.localStorage.getItem('todoList')) {\n    let todoList = JSON.parse(window.localStorage.getItem('todoList'));\n    console.log('fetching todos...');\n    console.log(todoList);\n    return (todoList);\n  }\n  else {\n    return null;\n  }\n}\n\n//this notification is not working propery, title is still localhost and button name is still ok...\nfunction onResume() {\n  navigator.notification.alert(\n    'Welcome back!',      // message\n    confirmCallback,      // callback\n    ['Game Over'],        // title\n    ['Done']              // buttonName\n  );\n}\n\nfunction onPause() {\n\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}