{"version":3,"sources":["Todos/AddTodo.js","layout/NavLinks.js","layout/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","content","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","className","onSubmit","this","type","onChange","Component","NavLinks","changeColor","console","log","document","getElementById","style","backgroundColor","getRandomRGBValue","Math","min","floor","random","getRandomColor","toString","slice","changeThemeColor","randomColor","href","id","onClick","Navbar","data-target","App","todo","localStorage","setItem","JSON","stringify","window","location","reload","removeTodo","index","removeItem","key","handleClick","node","contains","handleClickOutside","sidenav","querySelector","M","Sidenav","init","elems","querySelectorAll","Dropdown","inDuration","outDuration","addEventListener","removeEventListener","localTodos","i","length","getItem","push","ref","data-badge-caption","map","Boolean","hostname","match","renderReactDom","ReactDOM","render","onPause","alert","confirmCallback","onResume","navigator","notification","confirm","cordova","bind","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+LAuCeA,E,4MAnCXC,MAAQ,CACJC,QAAS,I,EAGbC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,QAASE,EAAEE,OAAOC,S,EAI1BC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKV,OACxB,EAAKI,SAAS,CACVH,QAAS,M,uDAKb,OACI,yBAAKU,UAAU,aACX,0BAAMC,SAAUC,KAAKN,cAEjB,+BAAO,uBAAGI,UAAU,UAAb,kBACP,yBAAKA,UAAU,sDACf,2BAAOG,KAAK,OAAOC,SAAUF,KAAKX,aAAcI,MAAOO,KAAKb,MAAMC,iB,GA3BhEe,aCmCPC,E,4MAhCXC,YAAc,WACVC,QAAQC,IAAI,SACZC,SAASC,eAAe,gBAAgBC,MAAMC,gBAAkB,Q,EAGpEC,kBAAoB,WAChB,OAAOC,KAAKC,IAAID,KAAKE,MAAsB,IAAhBF,KAAKG,SAAiB,GAAI,M,EAGzDC,eAAiB,WAIb,MAAO,MAAS,GAAK,KAHb,EAAKL,qBAGoB,KAFzB,EAAKA,qBAEgC,GADrC,EAAKA,qBACwCM,SAAS,IAAIC,MAAM,I,EAG5EC,iBAAmB,WACf,IAAIC,EAAc,EAAKJ,iBACvBT,SAASC,eAAe,gBAAgBC,MAAMC,gBAAkBU,EAChEb,SAASC,eAAe,WAAWC,MAAMC,gBAAkBU,G,uDAI3D,OACI,yBAAKvB,UAAU,gCACX,4BAAI,uBAAGwB,KAAK,KAAKxB,UAAU,YAAYyB,GAAG,eAAeC,QAASxB,KAAKoB,kBAAkB,uBAAGtB,UAAU,kBAAb,qB,GA3BlFK,aC4BRsB,E,uKAxBL,OACE,6BACI,yBAAK3B,UAAU,sBAAsByB,GAAG,WAErC,yBAAKzB,UAAU,aACV,uBAAGwB,KAAM,IAAIxB,UAAU,cAAvB,YACA,uBAAGwB,KAAK,IAAII,cAAY,eAAe5B,UAAU,mBAAkB,uBAAGA,UAAU,kBAAb,SAEnE,wBAAIA,UAAU,2CACV,kBAAC,EAAD,SAKR,yBAAKA,UAAU,aACX,wBAAIA,UAAU,uCAAuCyB,GAAG,gBACpD,kBAAC,EAAD,a,GApBPpB,a,gBCkINwB,E,4MA3Gb9B,QAAU,SAAC+B,GAETA,EAAKL,GAAKV,KAAKG,SACfa,aAAaC,QAAQF,EAAKL,GAAIQ,KAAKC,UAAUJ,EAAKxC,UAClD6C,OAAOC,SAASC,U,EAIlBC,WAAW,SAACC,GACV/B,QAAQC,IAAI,YACZD,QAAQC,IAAI8B,GACZR,aAAaS,WAAWT,aAAaU,IAAIF,IACzCJ,OAAOC,SAASC,U,EAIlBK,YAAa,SAAClD,GACN,EAAKmD,KAAKC,SAASpD,EAAEE,SAIzB,EAAKmD,sB,EAGTA,mBAAmB,WACjBrC,QAAQC,IAAI,kB,kEAzCZ,IAAIqC,EAAUpC,SAASqC,cAAc,iBACrCC,IAAEC,QAAQC,KAAKJ,EAAS,IAExB,IAAIK,EAAQzC,SAAS0C,iBAAiB,qBACtCJ,IAAEK,SAASH,KAAKC,EAAO,CAACG,WAAY,IAAKC,YAAa,Q,2CAItD7C,SAAS8C,iBAAiB,YAAatD,KAAKwC,aAAa,K,6CAIzDhC,SAAS+C,oBAAoB,YAAavD,KAAKwC,aAAa,K,+BAqC5D,IAHQ,IAAD,OAEHgB,EAAa,GACTC,EAAG,EAAGA,EAAI5B,aAAa6B,OAAQD,IACrCnD,QAAQC,IAAIsB,aAAa8B,QAAQ9B,aAAaU,IAAIkB,KAClDD,EAAWI,KAAK/B,aAAa8B,QAAQ9B,aAAaU,IAAIkB,KAyBxD,OACE,yBAAK3D,UAAU,OACb,yBAAKA,UAAU,aAAa+D,IAAK,SAAApB,GAAI,OAAI,EAAKA,KAAOA,IACnD,kBAAC,EAAD,MAEE,yBAAK3C,UAAU,OACb,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,iBAEb,yBAAKA,UAAU,0BAEf,wBAAIA,UAAU,cAAd,mBAhCiB,IAAxB+B,aAAa6B,OAEZ,6BACA,uDAI6B,IAAxB7B,aAAa6B,OAElB,6BACA,kCAAQ7B,aAAa6B,OAAOxC,WAA5B,WAMA,0BAAMpB,UAAU,YAAYgE,qBAAmB,SAASjC,aAAa6B,OAAOxC,YAgBtE,MAMA,yBAAKpB,UAAU,aACb,yBAAKA,UAAU,cACd0D,EAAWO,KAAI,SAACtE,EAAO4C,GACtB,OACE,yBAAKvC,UAAU,MAAMyC,IAAKF,GACxB,2BAAOvC,UAAU,kCACjB,2BAAOG,KAAK,aACZ,0BAAMH,UAAU,SAASL,IAEzB,yBAAKK,UAAU,2DAA2DL,MAAO4C,EAAOb,QAAS,kBAAM,EAAKY,WAAWC,KAAQ,uBAAGvC,UAAU,wBAAb,yBAA/H,gBAOR,kBAAC,EAAD,CAASD,QAASG,KAAKH,WAGzB,yBAAKC,UAAU,yB,GAnHXK,aCKE6D,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DCZN,IAAMC,EAAiB,WACrBC,IAASC,OAAO,kBAAC,EAAD,MAAS7D,SAASC,eAAe,UAyBnD,SAAS6D,IACPC,MAAM,UACNjE,QAAQC,IAAI,UAGd,SAASiE,IACPlE,QAAQC,IAAI,aAGd,SAASkE,IACPC,UAAUC,aAAaC,QAAQ,eAAgBJ,EAAiB,CAAC,WAAY,CAAC,OAhC5EvC,OAAO4C,QAETrE,SAAS8C,iBAAiB,cAQ5B,WAGE9C,SAAS8C,iBAAiB,QAASgB,EAAQQ,KAAK9E,OAAO,GAGvDQ,SAAS8C,iBAAiB,SAAUmB,EAASK,KAAK9E,OAAO,GACzDuE,MAAM,SACNjE,QAAQC,IAAI,kBACZ4D,KAjBuDW,UAAK,IAAO,IAInEX,IACA7D,QAAQC,IAAI,kBDkHR,kBAAmBmE,WACrBA,UAAUK,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/E,QAAQ+E,MAAMA,EAAMC,a","file":"static/js/main.1ec6c77c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass AddTodo extends Component {\n\n    state = {\n        content: ''\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            content: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state);\n        this.setState({\n            content: ''\n        })\n    }\n\n    render() {  \n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n\n                    <label><p className=\"center\">Add new todo:</p></label>\n                    <div className=\"input-field offset-l5 l2 offset-m4 m4 offset-s3 s6\">\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content}/>\n                    </div>\n\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default AddTodo","import React, { Component } from 'react'\nimport '../index.css'\n\nclass NavLinks extends Component {\n\n    changeColor = () => {\n        console.log('click')\n        document.getElementById('color-button').style.backgroundColor = \"blue\";\n    }\n\n    getRandomRGBValue = () => {\n        return Math.min(Math.floor(Math.random() * 255 + 1), 255);\n    }\n    \n    getRandomColor = () => {\n        var r = this.getRandomRGBValue(),\n            g = this.getRandomRGBValue(),\n            b = this.getRandomRGBValue();\n        return \"#\" + (((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1));\n    }\n    \n    changeThemeColor = () => {\n        var randomColor = this.getRandomColor();\n        document.getElementById('color-button').style.backgroundColor = randomColor;\n        document.getElementById('nav-bar').style.backgroundColor = randomColor;\n    }\n\n    render() {\n        return (\n            <div className=\"container side-nav-container\">\n                <li><a href=\"/#\" className=\"btn-small\" id=\"color-button\" onClick={this.changeThemeColor}><i className=\"material-icons\">color_lens</i></a></li>\n            </div>\n        )\n    }\n}\n\n\nexport default NavLinks;","import React, {Component} from 'react'\nimport NavLinks from './NavLinks'\n\nclass Navbar extends Component {\n\n    render() {\n        \n          return (\n            <div>\n                <nav className=\"nav-wrapper nav-bar\" id=\"nav-bar\">\n\n                   <div className=\"container\">\n                        <a href =\"/\" className=\"brand-logo\">Todo App</a>\n                        <a href=\"/\" data-target=\"mobile-links\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n\n                        <ul className=\"right hide-on-med-and-down signin-links\">\n                            <NavLinks />\n                        </ul>\n                   </div>\n                </nav>\n\n                    <div className=\"container\">\n                        <ul className=\"sidenav indigo center white side-nav\" id=\"mobile-links\">\n                            <NavLinks />\n                        </ul>\n                    </div>\n            </div>   \n        )   \n    }  \n}\n\nexport default Navbar","import React, { Component } from 'react';\nimport AddTodo from './Todos/AddTodo';\nimport Navbar from './layout/Navbar';\nimport M from 'materialize-css';\nimport './index.css';\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    let sidenav = document.querySelector('#mobile-links');\n    M.Sidenav.init(sidenav, {});\n\n    let elems = document.querySelectorAll('.dropdown-trigger');\n    M.Dropdown.init(elems, {inDuration: 300, outDuration: 200});\n  }\n\n  componentWillMount() {\n    document.addEventListener('mousedown', this.handleClick, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClick, false);\n  }\n\n//add todo to localstorate\n  addTodo = (todo) => {\n\n    todo.id = Math.random();\n    localStorage.setItem(todo.id, JSON.stringify(todo.content));\n    window.location.reload();\n  }\n\n//remove todo from localstorage\n  removeTodo=(index)=>{\n    console.log('removing')\n    console.log(index);\n    localStorage.removeItem(localStorage.key(index));\n    window.location.reload();\n  }\n\n//handle click outside functions, not used currently. for future ideas\n  handleClick =(e) => {\n      if (this.node.contains(e.target)) {\n      \n        return;\n      }\n      this.handleClickOutside();\n  }\n\n  handleClickOutside=()=> {\n    console.log('outside click')\n  }\n\n\n\n  render() {\n\n    let localTodos = [];\n    for(var i =0; i < localStorage.length; i++){\n      console.log(localStorage.getItem(localStorage.key(i)));\n      localTodos.push(localStorage.getItem(localStorage.key(i)));\n    }\n\n    const getTodos = () => {\n      if(localStorage.length === 0) {\n        return (\n          <div>\n          <span> nothing to do huh? </span>\n          </div>\n        )\n      }\n      else if (localStorage.length === 1) {\n        return (\n          <div>\n          <span>({localStorage.length.toString()}) todo</span>\n          </div>\n        )\n      }\n      else {\n        return (       \n          <span className=\"new badge\" data-badge-caption=\"todos\">{localStorage.length.toString()}</span>\n        )\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"outer-node\" ref={node => this.node = node}>\n          <Navbar />    \n      \n            <div className=\"row\">\n              <div className=\"col s12 m4 l2\"></div>\n              <div className=\"col s12 m4 l8\">\n\n                <div className=\"container center-align\">\n                  \n                <h5 className=\"brand-logo\"> your todo list {getTodos()} </h5>\n          \n                </div>\n               \n           \n             \n                <div className=\"container\">\n                  <div className=\"collection\">\n                  {localTodos.map((value, index) => {\n                    return (\n                      <div className=\"row\" key={index}>\n                        <label className=\"left todo-item collection-item\">\n                        <input type=\"checkbox\"/>\n                        <span className=\"badge\">{value}</span>\n                        </label>\n                        <div className=\"waves-effect waves-light btn-small right green-lighten-1\" value={index} onClick={() => this.removeTodo(index)}><i className=\"material-icons right\">remove_circle_outline</i>remove</div>\n                      </div>\n                    )\n                  })}\n                </div>\n                </div>\n\n                <AddTodo addTodo={this.addTodo} />\n\n              </div>\n              <div className=\"col s12 m4 l2\"></div>\n            </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n};\n\nif (window.cordova) {\n\n  document.addEventListener('deviceready', onDeviceReady.bind(this), false);\n\n} else {\n\n  renderReactDom();\n  console.log('else happened');\n}\n\nfunction onDeviceReady() {\n \n  //when user moves to another application\n  document.addEventListener('pause', onPause.bind(this), false);\n\n  //when user returns to application\n  document.addEventListener('resume', onResume.bind(this), false);\n  alert('ready');\n  console.log('ready happened');\n  renderReactDom();\n}\n\nfunction onPause() {\n  alert('paused');\n  console.log('paused');\n}\n\nfunction confirmCallback() {\n  console.log('confirmed');\n}\n\nfunction onResume() {\n  navigator.notification.confirm('welcome back', confirmCallback, ['resumed'], ['ok'])\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}